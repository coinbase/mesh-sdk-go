// Code generated by mockery v1.0.0. DO NOT EDIT.

package storage

import (
	context "context"

	storage "github.com/coinbase/rosetta-sdk-go/storage"
	mock "github.com/stretchr/testify/mock"

	types "github.com/coinbase/rosetta-sdk-go/types"
)

// BlockWorker is an autogenerated mock type for the BlockWorker type
type BlockWorker struct {
	mock.Mock
}

// AddingBlock provides a mock function with given fields: _a0, _a1, _a2
func (_m *BlockWorker) AddingBlock(_a0 context.Context, _a1 *types.Block, _a2 storage.DatabaseTransaction) (storage.CommitWorker, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 storage.CommitWorker
	if rf, ok := ret.Get(0).(func(context.Context, *types.Block, storage.DatabaseTransaction) storage.CommitWorker); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.CommitWorker)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *types.Block, storage.DatabaseTransaction) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovingBlock provides a mock function with given fields: _a0, _a1, _a2
func (_m *BlockWorker) RemovingBlock(_a0 context.Context, _a1 *types.Block, _a2 storage.DatabaseTransaction) (storage.CommitWorker, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 storage.CommitWorker
	if rf, ok := ret.Get(0).(func(context.Context, *types.Block, storage.DatabaseTransaction) storage.CommitWorker); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.CommitWorker)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *types.Block, storage.DatabaseTransaction) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
