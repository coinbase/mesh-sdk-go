{{>partial_header}}
package {{packageName}}

import (
	"encoding/json"
	"net/http"
	"strings"

  "github.com/coinbase/rosetta-sdk-go/types"
  "github.com/coinbase/rosetta-sdk-go/asserter"
)

// A {{classname}}Controller binds http requests to an api service and writes the service results to the http response
type {{classname}}Controller struct {
	service {{classname}}Servicer
  asserter *asserter.Asserter
}

// New{{classname}}Controller creates a default api controller
func New{{classname}}Controller(
  s {{classname}}Servicer,
  asserter *asserter.Asserter,
) Router {
	return &{{classname}}Controller{
    service: s,
    asserter: asserter,
  }
}

// Routes returns all of the api route for the {{classname}}Controller
func (c *{{classname}}Controller) Routes() Routes {
	return Routes{ {{#operations}}{{#operation}}
		{
			"{{operationId}}",
			strings.ToUpper("{{httpMethod}}"),
			"{{{basePathWithoutHost}}}{{{path}}}",
			c.{{operationId}},
		},{{/operation}}{{/operations}}
	}
}{{#operations}}{{#operation}}

// {{nickname}} - {{{summary}}}
func (c *{{classname}}Controller) {{nickname}}(w http.ResponseWriter, r *http.Request) { {{#allParams}}{{#isHeaderParam}}
	{{paramName}} := r.Header.Get("{{paramName}}"){{/isHeaderParam}}{{#isBodyParam}}
	{{paramName}} := &types.{{dataType}}{}
	if err := json.NewDecoder(r.Body).Decode(&{{paramName}}); err != nil {
    EncodeJSONResponse(&types.Error{
      Message: err.Error(),
    }, http.StatusInternalServerError, w)

    return
	}

  // Assert that {{dataType}} is correct
  if err := c.asserter.{{dataType}}({{paramName}}); err != nil {
    EncodeJSONResponse(&types.Error{
      Message: err.Error(),
    }, http.StatusInternalServerError, w)

    return
  }

	{{/isBodyParam}}{{/allParams}}
	result, serviceErr := c.service.{{nickname}}(r.Context(), {{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
	if serviceErr != nil {
    EncodeJSONResponse(serviceErr, http.StatusInternalServerError, w)

		return
	}
	
	EncodeJSONResponse(result, http.StatusOK, w)
}{{/operation}}{{/operations}}
